import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_absolute_percentage_error

# Load historical demand data (in CSV format or database)
data = pd.read_csv('historical_demand.csv', index_col='Date', parse_dates=True)
data = data['Demand']  # Replace 'Demand' with the column containing demand data

# Visualize historical time series
plt.figure(figsize=(10, 6))
plt.plot(data, label='Historical Demand')
plt.title('Historical Product Demand')
plt.xlabel('Date')
plt.ylabel('Demand')
plt.legend()
plt.show()

# Stationarity check (if needed, apply differencing)
from statsmodels.tsa.stattools import adfuller
adf_test = adfuller(data)
print(f'ADF Statistic: {adf_test[0]}')
print(f'p-value: {adf_test[1]}')

# Fit SARIMA model with parameters (p, d, q) and (P, D, Q, s) 
# Example SARIMA for monthly data with seasonal period of 12
model = SARIMAX(data, 
                order=(1, 1, 1),               # AR, I, MA
                seasonal_order=(1, 1, 1, 12))  # AR, I, MA, seasonal period of 12 months
sarima_result = model.fit(disp=False)

# Forecast for the next 12 months
forecast_steps = 12  # Forecasting for the next 12 months
forecast = sarima_result.predict(start=len(data), end=len(data) + forecast_steps - 1)

# Visualize Forecast
plt.figure(figsize=(10, 6))
plt.plot(data, label='Historical Demand')
plt.plot(forecast, label='Demand Forecast', color='red', linestyle='--')
plt.title('Demand Forecast for the Next 12 Months')
plt.xlabel('Date')
plt.ylabel('Demand')
plt.legend()
plt.show()

# Calculate forecast error using MAPE (Mean Absolute Percentage Error)
# Assuming real values for the forecast period are available in "real_values"
real_values = pd.Series(np.random.randn(forecast_steps) * 10 + 100, index=forecast.index)  # Example of real values
mape = mean_absolute_percentage_error(real_values, forecast)

# Calculating Forecast Accuracy (FA)
forecast_accuracy = 100 - mape

print(f'MAPE: {mape:.2f}%')
print(f'Forecast Accuracy (FA): {forecast_accuracy:.2f}%')

# Adjust supply capacity based on forecast
# Update logistics based on the forecast (e.g., adjust empty bottle or new product quantities)
